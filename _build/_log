### Starting build.
# Target: src/code_of_formula.ml.depends, tags: { package(cmdliner), package(core), package(easy-format), package(menhirlib), package(ppx_deriving), package(ppx_deriving.show), package(ppx_deriving.std), package(str), package(textutils), annot, bin_annot, extension:ml, file:src/code_of_formula.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ppx_deriving.std -package cmdliner -package str -package textutils -package easy-format -package ppx_deriving.show -package ppx_deriving -package menhirlib -package core -modules src/code_of_formula.ml > src/code_of_formula.ml.depends # cached
# Target: src/lexer.mll, tags: { package(cmdliner), package(core), package(easy-format), package(menhirlib), package(ppx_deriving), package(ppx_deriving.show), package(ppx_deriving.std), package(str), package(textutils), annot, bin_annot, extension:mll, file:src/lexer.mll, lexer, ocaml, ocamllex, quiet, thread, traverse }
/Users/kogaishinichi/.opam/4.03.0/bin/ocamllex.opt -q src/lexer.mll # cached
# Target: src/lexer.ml.depends, tags: { package(cmdliner), package(core), package(easy-format), package(menhirlib), package(ppx_deriving), package(ppx_deriving.show), package(ppx_deriving.std), package(str), package(textutils), annot, bin_annot, extension:ml, file:src/lexer.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ppx_deriving.std -package cmdliner -package str -package textutils -package easy-format -package ppx_deriving.show -package ppx_deriving -package menhirlib -package core -modules src/lexer.ml > src/lexer.ml.depends # cached
# Target: src/ir.ml.depends, tags: { package(cmdliner), package(core), package(easy-format), package(menhirlib), package(ppx_deriving), package(ppx_deriving.show), package(ppx_deriving.std), package(str), package(textutils), annot, bin_annot, extension:ml, file:src/ir.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ppx_deriving.std -package cmdliner -package str -package textutils -package easy-format -package ppx_deriving.show -package ppx_deriving -package menhirlib -package core -modules src/ir.ml > src/ir.ml.depends # cached
# Target: src/ir.cmo, tags: { package(cmdliner), package(core), package(easy-format), package(menhirlib), package(ppx_deriving), package(ppx_deriving.show), package(ppx_deriving.std), package(str), package(textutils), annot, bin_annot, byte, compile, extension:cmo, extension:ml, file:src/ir.cmo, file:src/ir.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -annot -bin-annot -thread -package ppx_deriving.std -package cmdliner -package str -package textutils -package easy-format -package ppx_deriving.show -package ppx_deriving -package menhirlib -package core -I src -o src/ir.cmo src/ir.ml # cached
# Target: src/parser.mly.depends, tags: { package(cmdliner), package(core), package(easy-format), package(menhirlib), package(ppx_deriving), package(ppx_deriving.show), package(ppx_deriving.std), package(str), package(textutils), annot, bin_annot, extension:mly, file:src/parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet, thread, traverse }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' src/parser.mly > src/parser.mly.depends # cached
# Target: src/parser.mly, tags: { package(cmdliner), package(core), package(easy-format), package(menhirlib), package(ppx_deriving), package(ppx_deriving.show), package(ppx_deriving.std), package(str), package(textutils), annot, bin_annot, byte, compile, extension:ml, extension:mly, file:src/parser.ml, file:src/parser.mly, infer, menhir, ocaml, parser, quiet, thread, traverse }
menhir --ocamlc 'ocamlfind ocamlc -annot -bin-annot -thread -package ppx_deriving.std -package cmdliner -package str -package textutils -package easy-format -package ppx_deriving.show -package ppx_deriving -package menhirlib -package core -I src' --infer src/parser.mly # cached
# Target: src/parser.mli.depends, tags: { package(cmdliner), package(core), package(easy-format), package(menhirlib), package(ppx_deriving), package(ppx_deriving.show), package(ppx_deriving.std), package(str), package(textutils), annot, bin_annot, extension:mli, file:src/parser.mli, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ppx_deriving.std -package cmdliner -package str -package textutils -package easy-format -package ppx_deriving.show -package ppx_deriving -package menhirlib -package core -modules src/parser.mli > src/parser.mli.depends # cached
# Target: src/parser.cmi, tags: { package(cmdliner), package(core), package(easy-format), package(menhirlib), package(ppx_deriving), package(ppx_deriving.show), package(ppx_deriving.std), package(str), package(textutils), annot, bin_annot, byte, compile, extension:mli, file:src/parser.mli, interf, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -annot -bin-annot -thread -package ppx_deriving.std -package cmdliner -package str -package textutils -package easy-format -package ppx_deriving.show -package ppx_deriving -package menhirlib -package core -I src -o src/parser.cmi src/parser.mli # cached
# Target: src/lexer.cmo, tags: { package(cmdliner), package(core), package(easy-format), package(menhirlib), package(ppx_deriving), package(ppx_deriving.show), package(ppx_deriving.std), package(str), package(textutils), annot, bin_annot, byte, compile, extension:cmo, extension:ml, file:src/lexer.cmo, file:src/lexer.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -annot -bin-annot -thread -package ppx_deriving.std -package cmdliner -package str -package textutils -package easy-format -package ppx_deriving.show -package ppx_deriving -package menhirlib -package core -I src -o src/lexer.cmo src/lexer.ml # cached
# Target: src/code_of_formula.cmo, tags: { package(cmdliner), package(core), package(easy-format), package(menhirlib), package(ppx_deriving), package(ppx_deriving.show), package(ppx_deriving.std), package(str), package(textutils), annot, bin_annot, byte, compile, extension:cmo, extension:ml, file:src/code_of_formula.cmo, file:src/code_of_formula.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -annot -bin-annot -thread -package ppx_deriving.std -package cmdliner -package str -package textutils -package easy-format -package ppx_deriving.show -package ppx_deriving -package menhirlib -package core -I src -o src/code_of_formula.cmo src/code_of_formula.ml # cached
# Target: src/parser.ml.depends, tags: { package(cmdliner), package(core), package(easy-format), package(menhirlib), package(ppx_deriving), package(ppx_deriving.show), package(ppx_deriving.std), package(str), package(textutils), annot, bin_annot, extension:ml, file:src/parser.ml, ocaml, ocamldep, quiet, thread, traverse }
ocamlfind ocamldep -package ppx_deriving.std -package cmdliner -package str -package textutils -package easy-format -package ppx_deriving.show -package ppx_deriving -package menhirlib -package core -modules src/parser.ml > src/parser.ml.depends # cached
# Target: src/parser.cmo, tags: { package(cmdliner), package(core), package(easy-format), package(menhirlib), package(ppx_deriving), package(ppx_deriving.show), package(ppx_deriving.std), package(str), package(textutils), annot, bin_annot, byte, compile, extension:cmo, extension:ml, file:src/parser.cmo, file:src/parser.ml, implem, ocaml, quiet, thread, traverse }
ocamlfind ocamlc -c -annot -bin-annot -thread -package ppx_deriving.std -package cmdliner -package str -package textutils -package easy-format -package ppx_deriving.show -package ppx_deriving -package menhirlib -package core -I src -o src/parser.cmo src/parser.ml
# Target: src/code_of_formula.byte, tags: { package(cmdliner), package(core), package(easy-format), package(menhirlib), package(ppx_deriving), package(ppx_deriving.show), package(ppx_deriving.std), package(str), package(textutils), annot, bin_annot, byte, dont_link_with, extension:byte, file:src/code_of_formula.byte, link, ocaml, program, quiet, thread, traverse }
ocamlfind ocamlc -linkpkg -thread -package ppx_deriving.std -package cmdliner -package str -package textutils -package easy-format -package ppx_deriving.show -package ppx_deriving -package menhirlib -package core -I src src/ir.cmo src/parser.cmo src/lexer.cmo src/code_of_formula.cmo -o src/code_of_formula.byte
# Compilation successful.
